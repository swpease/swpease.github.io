<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Scott's Stuff</title><link href="https://swpease.github.io/" rel="alternate"></link><link href="https://swpease.github.io/feeds/all.atom.xml" rel="self"></link><id>https://swpease.github.io/</id><updated>2019-04-24T00:00:00-07:00</updated><entry><title>Shaving</title><link href="https://swpease.github.io/shaving.html" rel="alternate"></link><published>2019-04-24T00:00:00-07:00</published><updated>2019-04-24T00:00:00-07:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2019-04-24:/shaving.html</id><summary type="html">&lt;h1&gt;The Options&lt;/h1&gt;
&lt;p&gt;I have had to shave regularly, since some time in high school. I have fairly thick hair, particularly in the chin and mustache region. It can be a hassle. I've tried a few options over the years:
1. Buying cartridges in stores.
2. Subscribing to online clubs.
3 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Options&lt;/h1&gt;
&lt;p&gt;I have had to shave regularly, since some time in high school. I have fairly thick hair, particularly in the chin and mustache region. It can be a hassle. I've tried a few options over the years:
1. Buying cartridges in stores.
2. Subscribing to online clubs.
3. Safety razors.&lt;/p&gt;
&lt;p&gt;They each have their pros and cons, which I'll go over.&lt;/p&gt;
&lt;h3&gt;Buying Cartridges in Stores&lt;/h3&gt;
&lt;p&gt;The classic for anyone who isn't geriatric. I remember when my dad taught me to shave. It was basically, "spray some shaving cream into your hand, rub it over your face, then rub this razor over your face..." There's really nothing to it.&lt;/p&gt;
&lt;p&gt;I like shaving with these the best. I have always been a fan on the two-bladed cartridges. Three is okay, but I dislike how bulky the larger-count cartridges are. I also feel like they're a complete waste, given how effective two blades have been for me.&lt;/p&gt;
&lt;p&gt;The only issue for me is cost. I recently checked out the cartridges selection at Fred Meyer, and saw my trusty Sensor Excels at 10 for $30. That's just too much. This price is what drove me to try option #2 on the list.&lt;/p&gt;
&lt;h3&gt;Subscribing to Online Clubs&lt;/h3&gt;
&lt;p&gt;I tried out Dollar Shave Club. I went with the two-bladed model. At first I was pleased with it: it did the job well and cost a fraction of the price (I think ~ $1 / cartridge).&lt;/p&gt;
&lt;p&gt;But then, I visited my parents, where I still have some of the classic cartridges (both Sensor Excel and Mach 3). It felt like heaven to my face in comparison.&lt;/p&gt;
&lt;p&gt;If I had to guess, I'd say that the issue was the flimsy construction, which might cause some shaking / other motion that leads to uneven speeds across my face, leading to more tugging. But that's just conjecture.&lt;/p&gt;
&lt;p&gt;Which led me to option #3 on the list.&lt;/p&gt;
&lt;h3&gt;Safety Razors&lt;/h3&gt;
&lt;p&gt;I performed a little research using some relevant subreddit. I forget the name. But I wound up going with Maggard for my razor, styptic, alum block, brush, a variety pack of blades, and 'sapone di barba' or whatever.&lt;/p&gt;
&lt;p&gt;I've been using it for close to a year now, and my conclusion is: it's okay. I haven't been this nonplussed by a hyped alternative product since organic peanut butter.&lt;/p&gt;
&lt;p&gt;I did learn why dads teaching their sons how to shave is actually a thing: there's a lot more going on with safety razor shaving compared to cartridge shaving. You gotta lather the shaving cream, angle the razor, be careful about the grain...&lt;/p&gt;
&lt;p&gt;But, I still just prefer the ease and comfort of a Gillette cartridge and canned shaving cream. Sure, my &lt;em&gt;sapone&lt;/em&gt; smells nice, but it's inconvenient and expensive. It is more common for me to miss spots with my safety razor as well, stemming from the fact that it's not as comfortable on my face. Plus I'm still trying to find my optimum razor blades, an area for which reviews aren't really much use, since other reviewers don't have your face.&lt;/p&gt;
&lt;p&gt;That being said, the cartridge is not 10+ times the price better. So I'll stick with my safety razor.&lt;/p&gt;</content><category term="grooming"></category></entry><entry><title>Setting up Gunicorn with systemd on Ubuntu</title><link href="https://swpease.github.io/setting-up-gunicorn-with-systemd-on-ubuntu.html" rel="alternate"></link><published>2019-01-25T00:00:00-08:00</published><updated>2019-01-25T00:00:00-08:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2019-01-25:/setting-up-gunicorn-with-systemd-on-ubuntu.html</id><summary type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Gunicorn provides &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;a number of ways&lt;/a&gt; for you to handle running it in deployment. You need a supervisor, which is just a process that monitors and manages some other process. So you can tell it things like, 'start gunicorn when someone first requests a webpage' and 'reload gunicorn when …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Gunicorn provides &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;a number of ways&lt;/a&gt; for you to handle running it in deployment. You need a supervisor, which is just a process that monitors and manages some other process. So you can tell it things like, 'start gunicorn when someone first requests a webpage' and 'reload gunicorn when it crashes'.&lt;/p&gt;
&lt;p&gt;In skimming over the options that Gunicorn listed, I initially thought of using Supervisor, probably because I had seen it mentioned before. I am wary of my disposition to trusting things just because I've heard of them, but decided to look into it anyway. I saw that I would need to install Python 2 to use it, and put my foot down.
I decided to try out systemd because it was a built-in tool, and I am suspicious of taking on dependencies for what seem to be minimal tasks. It also seemed the most generalizable thing to learn.&lt;/p&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;The best basic introduction I found was on &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files#anatomy-of-a-unit-file"&gt;Digital Ocean&lt;/a&gt;.
The systemd creators have their documentation as well: &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html#"&gt;systemd&lt;/a&gt;, &lt;a href="https://www.freedesktop.org/software/systemd/man/systemctl.html"&gt;systemctl&lt;/a&gt;.
More advanced topics, such as security and setting up your own software to handle systemd socket stuff, are covered in this dude Pid Eins's &lt;a href="http://0pointer.de/blog/projects/security.html"&gt;blog&lt;/a&gt;, though it's not spectacularly organized.
For implementing systemd for Gunicorn, I referenced mostly &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;Gunicorn&lt;/a&gt;, but also &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04#create-a-gunicorn-systemd-service-file"&gt;Digital Ocean&lt;/a&gt;.
I might need a systemd service file for &lt;a href="https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Execution&lt;/h1&gt;
&lt;p&gt;Gunicorn recommends setting up a socket, which is always listening, which starts up Gunicorn proper via a corresponding "service". Per Eins's blog, this can be a more efficient way to use resources. For instance, if you have a bunch of rarely-accessed websites on the same server, you could activate / deactivate them as needed. I wonder if this is how Heroku manages its hobby-tier apps.&lt;/p&gt;
&lt;p&gt;The gunicorn.socket file is super simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn socket&lt;/span&gt;

&lt;span class="k"&gt;[Socket]&lt;/span&gt;
&lt;span class="na"&gt;ListenStream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/run/gunicorn/socket&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sockets.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It basically specifies an address to listen on for a stream socket. systemd appears to create this socket as part of this gunicorn.socket file's existence -- this socket is the only contents of /run/gunicorn when you navigate to it upon starting up the server.&lt;/p&gt;
&lt;p&gt;The gunicorn.service is a bit more complex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn daemon&lt;/span&gt;
&lt;span class="na"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn.socket&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;PIDFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/run/gunicorn/pid&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;vagrant&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;RuntimeDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/vagrant/mysite&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/vagrant/.local/share/virtualenvs/vagrant-gKDsaKU3/bin/gunicorn --pid /run/gunicorn/pid --bind unix:/run/gunicorn/socket mysite.wsgi&lt;/span&gt;
&lt;span class="na"&gt;ExecReload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/bin/kill -s HUP $MAINPID&lt;/span&gt;
&lt;span class="na"&gt;ExecStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/bin/kill -s TERM $MAINPID&lt;/span&gt;
&lt;span class="na"&gt;PrivateTmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is more complex. An annotation (NB: I do not know what all of these mean) goes something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Requires=gunicorn.socket&lt;/code&gt; says that gunicorn.service is dependent upon gunicorn.socket.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PIDFile=/run/gunicorn/pid&lt;/code&gt; I'm unsure why Gunicorn's docs have this in here. Look at the systemd docs for more info on it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; per Digital Ocean,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We will give our regular user account ownership of the process since it owns all of the relevant files. We'll give group ownership to the www-data group so that Nginx can communicate easily with Gunicorn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am still a bit unclear about what user and group will be needed. I tried setting both &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; to be "vagrant", and tried both as "www-data", and both yield responses when connecting to the index page on localhost.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RuntimeDirectory=gunicorn&lt;/code&gt; The &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#"&gt;docs&lt;/a&gt; indicate that the directory's lifetime will be bound to the daemon's. Upon running &lt;code&gt;sudo systemctl stop gunicorn.service&lt;/code&gt;, which calls the &lt;code&gt;ExecStop&lt;/code&gt; command, /run/gunicorn is empty, i.e. the socket is gone. It looks like this declaration supersedes the Gunicorn docs's suggestion of having /etc/tmpfiles.d/gunicorn.conf (systemd says tmpfiles.d is for complex cases).
Removing this line yields the following error when trying to connect:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl: (56) Recv failure: Connection reset by peer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it appears that /run/gunicorn and its parent dirs are owned by root with permissions 755. Conversely, when RuntimeDirectory is specified, /run/gunicorn has User and Group equal to what they were specified as in the gunicorn.service file (vagrant and www-data in this case).
When the service has been halted, then, per RuntimeDirectory's behavior, /run/gunicorn will be deleted. As such, to restart things, you need to restart gunicorn.socket with &lt;code&gt;sudo systemctl restart gunicorn.socket&lt;/code&gt;. This will recreate the /run/gunicorn directory with the socket in it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WorkingDirectory&lt;/code&gt; sets the directory for any executed commands (e.g. ExecStart).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExecStart&lt;/code&gt; and company are just commands to execute at the relevant lifecycle events. For my purposes, because I have Gunicorn installed via a virtual environment, I have to provide the path to its actual install. I think I could alternatively use other lifecycle hooks to start and stop the virtual environment, the just call 'gunicorn' in my ExecStart.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PrivateTmp&lt;/code&gt; is described as a security feature (see also Eins's blog)&lt;/p&gt;
&lt;h1&gt;Problems I Encountered&lt;/h1&gt;
&lt;p&gt;I made some edits to my gunicorn.service file, and I was not getting my curl test to work (&lt;code&gt;curl --unix-socket /run/gunicorn/socket http://localhost:8000&lt;/code&gt; &lt;em&gt;mind the port&lt;/em&gt;). Upon restarting the VM, it worked. I believe I needed to run &lt;code&gt;sudo systemctl daemon-restart&lt;/code&gt;.&lt;/p&gt;</content><category term="computer"></category><category term="backend"></category><category term="howto"></category></entry><entry><title>Soaking Dishes</title><link href="https://swpease.github.io/soaking-dishes.html" rel="alternate"></link><published>2019-01-06T00:00:00-08:00</published><updated>2019-01-06T00:00:00-08:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2019-01-06:/soaking-dishes.html</id><summary type="html">&lt;h1&gt;Dish Soaking Traumas&lt;/h1&gt;
&lt;p&gt;Ever since moving out of the dorm in college, I have be plagued by a roommate who is a dish soaker. It's horrible! This essentially translates to that, aside from times when I have lived alone, there has been a dirty dish in the sink very nearly …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Dish Soaking Traumas&lt;/h1&gt;
&lt;p&gt;Ever since moving out of the dorm in college, I have be plagued by a roommate who is a dish soaker. It's horrible! This essentially translates to that, aside from times when I have lived alone, there has been a dirty dish in the sink very nearly every single day of my life. There have been three primary offenders:&lt;/p&gt;
&lt;h2&gt;Roommate #1&lt;/h2&gt;
&lt;p&gt;This primarily constituted peanut-butter coated utensils. The strategy appeared to be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clean the spoon / knife that has been festering in the sink for the better part of a day.&lt;/li&gt;
&lt;li&gt;Get out a new spoon / knife for peanut butter.&lt;/li&gt;
&lt;li&gt;Place said utensil in the sink.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This also yielded perpetual peanut butter spots on the bottom of the sink. The icing on the cake is that this roommate did not wash the peanut butter off the sponge, so there were globs of peanut butter left on it for me to clean off 🤢.&lt;/p&gt;
&lt;p&gt;As an aside, Roommate #1 was an incompetent dishwasher. They didn't seem to grasp the concept that dishes are three-dimensional objects. Further, they didn't seem to grasp that, by virtue of their dish soaking, they were paradoxically making their dishes dirtier. Take a frying pan for instance. The residual oil in the pan, when put into the sink, get distributed across some larger portion of the pan, most notably the bottom. This wouldn't be an issue if my roommate was aware of what was happening, but they didn't consider anything except the initially relevant portion worth running a sponge over, so the bottom of the pan wound up worse off after its "cleaning". A similar argument exists for the handles of the peanut butter utensils.&lt;/p&gt;
&lt;p&gt;This dish soaking dirtification, which I always think of as a manifestation of &lt;a href="https://en.wikipedia.org/wiki/Fugacity_capacity"&gt;fugacity capacity&lt;/a&gt;, seems to be lost on dish soakers. Which brings me to...&lt;/p&gt;
&lt;h2&gt;Roommate #2&lt;/h2&gt;
&lt;p&gt;They had this big red bowl that they would use for virtually every meal. I would go so far as so say that the sink was where their bowl's storage spot. I can't remember it not ever being in there. The weakest offender of the trio, they were definitely cognizant of the three-dimensional nature of dishes. Plus I never used that bowl, so its cleanliness wasn't a huge deal to me. It just always kinda grossed me out to see that bowl getting covered in who knows what over the course of the day. So, last, but certainly not least...&lt;/p&gt;
&lt;h2&gt;Roommate #3&lt;/h2&gt;
&lt;p&gt;Again, a competent dish washer. The main issue I had with this dish soaker was that our faucet was leaky, and they somehow were not bothered by the sound of water drops splashing into a little pool. My room was on the second floor, so I would frequently have to go downstairs to the kitchen and move the faucet so that it wasn't over the bowl or pan that they were soaking. They knew I hated it and thought it was funny. The best revenge I could think of was to lay a plate in their favorite spot for cups in the dish washer; "It's like you do it on purpose!".&lt;/p&gt;
&lt;h1&gt;The Utility of Soaking&lt;/h1&gt;
&lt;p&gt;While my prior interlude during my rant on Roommate #1 covers the majority of my issue with dish soaking, I would like to add that I believe the desire to soak dishes comes from a typically greatly overestimated estimate as to how long a dish has to soak for it to become easy to wash. I have mostly left my dishes randomly dispersed on the counters / stove. I have never figured out if any of my roommates hated this strategy as much as I hate dish soaking. But, typically I am able to soak dishes in the time it takes me to do the dishes that don't require soaking. For instance, the pan with dried red sauce I'll put in the sink before doing some utensils or some such, and this brief soak gets me most of the way to where the three-hour soak would. That being said, there are definitely some dishes that require a long soak. Things like cheesy casserole dishes. I almost forgot, it is harder for someone else to do dishes when you are soaking your dishes.&lt;/p&gt;
&lt;p&gt;I think that about covers my opinions on dish soaking.&lt;/p&gt;</content><category term="cooking"></category><category term="cleaning"></category></entry><entry><title>Stuff About Ports and Sockets</title><link href="https://swpease.github.io/stuff-about-ports-and-sockets.html" rel="alternate"></link><published>2018-12-15T00:00:00-08:00</published><updated>2018-12-15T00:00:00-08:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2018-12-15:/stuff-about-ports-and-sockets.html</id><summary type="html">&lt;p&gt;Socket = {IP Address : Port}
Connection = {Local Socket + Remote Socket + Protocol}
Protocol = TCP, UDP, etc.
Listen = Look for client requests at a specific well-known port.&lt;/p&gt;
&lt;p&gt;A server socket can serve multiple clients because the service just kinda keeps track of which requests are associated with which clients. Which I suppose makes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Socket = {IP Address : Port}
Connection = {Local Socket + Remote Socket + Protocol}
Protocol = TCP, UDP, etc.
Listen = Look for client requests at a specific well-known port.&lt;/p&gt;
&lt;p&gt;A server socket can serve multiple clients because the service just kinda keeps track of which requests are associated with which clients. Which I suppose makes complete sense without any thought.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/3329641/how-do-multiple-clients-connect-simultaneously-to-one-port-say-80-on-a-server"&gt;Stack Overflow&lt;/a&gt;: How to multiple clients connect simultaneously to one port?&lt;/p&gt;
&lt;p&gt;When a client connects to a server, the client uses a random, unused, high-number port. That way multiple people with the same IP address (family, coworkers, etc.) can use the same service at the same time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/1694144/can-two-applications-listen-to-the-same-port"&gt;Stack Overflow&lt;/a&gt;: Can two applications listen to the same port?&lt;/p&gt;
&lt;p&gt;For TCP, no. That's the reason ports exist: to allow multiple applications to share the network without conflicts. Well, technically yes, but not without work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Port_(computer_networking)"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For TCP, only one process may bind to a specific IP address and port combination.
Common application failures, sometimes called port conflicts, occur when multiple programs attempt to use the same port number on the same IP address with the same protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol"&gt;Quora&lt;/a&gt;: The differences between IP, TCP, HTTP, etc.&lt;/p&gt;
&lt;h2&gt;Sockets&lt;/h2&gt;
&lt;p&gt;The answer given by Daniel Miller is quite good.
See also &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite#Internet_layer"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Application programmers are typically concerned only with interfaces in the application layer and often also in the transport layer, while the layers below are services provided by the TCP/IP stack in the operating system. Most IP implementations are accessible to programmers through sockets and APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are multiple, different definitions of "socket" depending on context. e.g. the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_sockets"&gt;Berkeley socket&lt;/a&gt;, for which a socket is an abstract representation for the local endpoint of a network communication path. Incidentally, Berkeley sockets answers my questions about where IP and transport layer coding is stored / interacted with (a socket API).&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://docs.python.org/3.7/howto/sockets.html"&gt;Python sockets HOWTO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Useful answer on &lt;a href="https://askubuntu.com/questions/247625/what-is-the-loopback-device-and-how-do-i-use-it"&gt;loopback&lt;/a&gt;
&lt;a href="https://docs.freebsd.org/44doc/psd/20.ipctut/paper.pdf"&gt;Berkeley sockets&lt;/a&gt;&lt;/p&gt;</content><category term="computer"></category><category term="networking"></category><category term="sockets"></category></entry></feed>