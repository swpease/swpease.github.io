<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Scott's Stuff</title><link href="https://swpease.github.io/" rel="alternate"></link><link href="https://swpease.github.io/feeds/all.atom.xml" rel="self"></link><id>https://swpease.github.io/</id><updated>2022-05-25T00:00:00-07:00</updated><entry><title>It's A Coin Flip!</title><link href="https://swpease.github.io/its-a-coin-flip.html" rel="alternate"></link><published>2022-05-25T00:00:00-07:00</published><updated>2022-05-25T00:00:00-07:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2022-05-25:/its-a-coin-flip.html</id><summary type="html">&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;While I have only been watching snooker since the 2019 World Championship, I gather than matches have become shorter over time. People tend to complain that the shorter formats add a larger element of luck to the outcomes. I decided to try and put some numbers to this …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;While I have only been watching snooker since the 2019 World Championship, I gather than matches have become shorter over time. People tend to complain that the shorter formats add a larger element of luck to the outcomes. I decided to try and put some numbers to this perception.&lt;/p&gt;
&lt;h1&gt;The Data&lt;/h1&gt;
&lt;p&gt;I got the data from &lt;a href="snooker.org"&gt;snooker.org&lt;/a&gt;'s API. I took data from the 2015/16 season through to the end of the past season (2021/22). I picked this timespan because it looks like the current rankings system &lt;a href="http://api.snooker.org/help.html#RankingTypes"&gt;started then&lt;/a&gt;. I looked at ranking events only, and only those first rounds of 128 players. I restricted to the round of 128 to try and keep things as even as possible (full draw, no "hot" players, etc.). I omitted walkovers, of which there are often one or two, and sometimes a lot (Gibralter Open 2022). To summarize:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Seasons 2015/16 – 2021/22&lt;/li&gt;
&lt;li&gt;Ranking events&lt;/li&gt;
&lt;li&gt;First round only, of 128 players&lt;/li&gt;
&lt;li&gt;Walkovers excluded&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Basic Comparison&lt;/h1&gt;
&lt;h2&gt;Upsets by Tournament&lt;/h2&gt;
&lt;p&gt;Let's start by looking at things on a tournament-by-tournament basis over time, because that's how the data comes at us. What percentage of matches per tournament were upsets?&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 1" src="https://swpease.github.io/images/snooker/snooker_pct_upsets_by_season.png"&gt;&lt;/p&gt;
&lt;p&gt;Hm. This isn't &lt;em&gt;super&lt;/em&gt; informative... Let's ignore the seasons, group the tournaments by match length, and split out Top 16 seeds from the others:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 2" src="https://swpease.github.io/images/snooker/snooker_num_upsets_by_tourn.png"&gt;&lt;/p&gt;
&lt;p&gt;I guess longer matches make upsets a bit rarer, but it's hardly night and day. A handy thing about this plot is the two y-axes (# Upsets) go to 100%, so we can use the heights of the dots between the Top 16 seeds and the non-Top 16 seeds for percent-wise comparison. &lt;/p&gt;
&lt;p&gt;What are the actual numbers? &lt;/p&gt;
&lt;h2&gt;Upset Percentages&lt;/h2&gt;
&lt;p&gt;Now let's look at the upset percentages of all tournaments combined, split out by match length. I'll also split out the Top 16 seeds&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; from the sub-Top 16 higher seeds. (See below&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2" rel="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; for counts of the matches in each sub-group, so we know how many we're talking about. Important, but busy.) I'll include the Shoot-Out and British Open here and in any subsequent tables, even though I don't pay them much attention, because an extra line on a table is easier to ignore than extra lines/dots on a chart. Let's see:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 4" src="https://swpease.github.io/images/snooker/snooker_total_upset_pct.png"&gt;&lt;/p&gt;
&lt;p&gt;So, looking at Best of 9's – 11's, upsets are less likely in longer matches. &lt;strong&gt;We can expect one more Top 16 Seed to be upset in Best of 7's compared to Best of 11's (2 -&amp;gt; 3, of 16), and three more non-Top 16 Seeds (13 -&amp;gt; 16, of 48)&lt;/strong&gt;. For reference: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;20% = 1 in 5 &lt;/li&gt;
&lt;li&gt;17% = 1 in 6 &lt;/li&gt;
&lt;li&gt;14% = 1 in 7 &lt;/li&gt;
&lt;li&gt;12% = 1 in 8 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Case closed! Right? Well... these matches aren't all between the same seedings each time. How much does that change things?&lt;/p&gt;
&lt;h1&gt;Factoring in Match Difficulty&lt;/h1&gt;
&lt;h2&gt;Upset Potentials Defined&lt;/h2&gt;
&lt;p&gt;Seed 2 losing to seed 42 is a bigger upset than seed 42 losing to seed 82. To account for this aspect of the rankings, I converted the seeds using the base-2 logarithm, which I'll write as &lt;code&gt;log2(seed)&lt;/code&gt;. If you're unfamiliar with logarithms, here are some reference values to get the gist:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 6" src="https://swpease.github.io/images/snooker/snooker_lg_ref.png"&gt;&lt;/p&gt;
&lt;p&gt;I created a metric from these logarithmed seedings that I called &lt;strong&gt;upset potential&lt;/strong&gt;, which is just the size of the difference in the match's two players' logarithmed seedings, i.e.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;upset potential&lt;/strong&gt; = &lt;code&gt;log2(higher seed) - log2(lower seed)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I set any amateurs' seeding as 128. I also think of the upset potential as equating to &lt;strong&gt;skill gap&lt;/strong&gt;. For instance, Yan (16) losing to Ding (32) has an upset potential of 1.00, and Ding losing to Ursenbacher (62) has an upset potential of 0.95. Does that sound about right to you?&lt;sup id="fnref:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;Splitting Out the Upset Potentials&lt;/h2&gt;
&lt;p&gt;Here are the average upset potentials, split out by match length:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 7" src="https://swpease.github.io/images/snooker/snooker_upset_potential.png"&gt;&lt;/p&gt;
&lt;p&gt;A smaller upset potential means the match had players closer in seeding. So we see that, moving from Best of 7 to Best of 11, the average upset potential increased, which means that &lt;strong&gt;the higher seeded players had easier matches on average with increasing match length&lt;/strong&gt;. How much easier? Well, the Top 16 Seeds had on average an upset potential in their matches 0.4 greater in Best of 11 compared to Best of 9. That's like playing Seed 28 instead of Seed 21, Seed 42 instead of Seed 32, or Seed 84 instead of Seed 64!&lt;/p&gt;
&lt;p&gt;And the same info, further split by whether an upset occurred:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 8" src="https://swpease.github.io/images/snooker/snooker_upset_potential_split.png"&gt;&lt;/p&gt;
&lt;p&gt;So, for a given match length, the upsets have a smaller average upset potential compared to the non-upsets, i.e. upsets happen when the players are closer in skill level. Obviously. This happens across the board. Wait... what about the Top 16 seeds in the Best of 11? Top 16 seeds have been more likely to lose against &lt;em&gt;worse&lt;/em&gt; players in Best of 11s these past several years! Oh dear.&lt;/p&gt;
&lt;h2&gt;Splitting Out the Upset Potentials Even More&lt;/h2&gt;
&lt;h3&gt;Upset Percents, Grouped by Upset Potential&lt;/h3&gt;
&lt;p&gt;Well, so how does a higher seed do for a given upset potential, i.e. against players of the same skill gap, across the match lengths? Here is the data, rounding down the upset potentials to the nearest whole number:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 9" src="https://swpease.github.io/images/snooker/snooker_u_p_barplt_log2.png"&gt;&lt;/p&gt;
&lt;p&gt;50% upsets is the proverbial coin flip. The blue / orange / green bars show what has &lt;em&gt;actually happened&lt;/em&gt;, while the black lines at the top of each bar are the 95% confidence intervals. Essentially, the longer the black line, the less trust you should put in the corresponding colored bar staying where it is as more data is collected. Some of these are pretty huge (Top 16 upset potential of 0, 1, 6, 7). I'm guessing there aren't many data points... Nope. See here&lt;sup id="fnref:4"&gt;&lt;a class="footnote-ref" href="#fn:4" rel="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Well, in that case, let's use that other upset potential metric from Footnote &lt;sup id="fnref2:3"&gt;&lt;a class="footnote-ref" href="#fn:3" rel="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt; and see what happens. The counts look better&lt;sup id="fnref:5"&gt;&lt;a class="footnote-ref" href="#fn:5" rel="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;, so how does the plot look?:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 10" src="https://swpease.github.io/images/snooker/snooker_u_p_barplt_ceillog2div4.png"&gt;&lt;/p&gt;
&lt;p&gt;So it looks pretty similar, except at higher upset potentials for Top 16 matches, which was exactly the point.&lt;/p&gt;
&lt;h4&gt;Conclusions&lt;/h4&gt;
&lt;p&gt;What can we get out of these plots? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;At a given upset potential (skill gap), there are more instances of the expected pattern of increasing match length yielding decreasing upset % &lt;em&gt;not&lt;/em&gt; happening than happening.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At a given skill gap, the differences in upset % usually and at most equate to differences of a few more/fewer upsets.&lt;/strong&gt; Maximums: &lt;ul&gt;
&lt;li&gt;For Top-16 Seeds: 3 fewer in Best of 11 vs Best of 7 at upset potential of 2.&lt;/li&gt;
&lt;li&gt;For non-Top-16 Seeds: 4 fewer in Best of 11 vs Best of 9 (note: not 7!) at upset potential of 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At a given match length, increasing skill gap makes upsets less and less likely, with the notable exception of Top 16 seeds in Best of 11's, for which the opposite trend is true.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Yet Another View&lt;/h2&gt;
&lt;h3&gt;Percent Realized Upset Potential&lt;/h3&gt;
&lt;p&gt;One last way I wanted to look at the data is comparing the total upset potential for a tournament against the amount of that upset potential that actually occurred.&lt;/p&gt;
&lt;p&gt;"Percent realized upset potential" a lot of words; let's unpack it. We've established what "upset potential" means. "Realized" refers to the upsets that actually happened. "Percent" refers to totaling the realized upset potentials, and dividing by the total upset potentials over all the matches in the tournament round.&lt;/p&gt;
&lt;p&gt;A simple example: only two matches in the round, Match 1 has an upset potential of 3, while Match 2 has an upset potential of 1. If neither is an upset, the percent realized upset potential is 0%. If both are upsets, it is 100%. If Match 1 is an upset while Match 2 isn't, it is 3/4 = 75%. If Match 2 is an upset while Match 1 isn't, it is 1/4 = 25%.&lt;/p&gt;
&lt;p&gt;Here's what it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Table 11" src="https://swpease.github.io/images/snooker/snooker_pct_realized_u_p.png"&gt;&lt;/p&gt;
&lt;p&gt;There seem to be a few aspects in favor of either side of the argument.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points in favor of match length mattering:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Shoot-Out and British Open are at the upper end of percent realized upset potential.&lt;/li&gt;
&lt;li&gt;The Best of 7's at similar total upset potential to longer matches are also at the upper end of percent realized upset potential in that subset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, in both cases there are not very many data points. Even so, I suspect neither the Shoot-Out nor the British Open data will budge much in coming years, given their unique formats.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Points in favor of match length not mattering:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Best of 9's seem to have a similar distribution to the Best of 7's at the lower total upset potentials, along with a similar distribution to the Best of 11's at the higher total upset potentials. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, a general point about the graph:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The percent realized upset potential seems to get both less variable and on average smaller as the total upset potential increases. However, the match lengths tend to increase as total upset potential increases, confounding the relationship. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;
&lt;p&gt;I think the major takeaways from this analysis are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Upsets are more likely in shorter matches.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shorter matches tend to be against harder opponents for higher seeds.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At a given skill gap, there isn't a consistent relationship between match length and the chances of an upset.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all for now! I hope you at least gave the graphs a good look.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Note I said "Seeds", not "Ranking". So the defending champion is Seed 1. Yes, it's a smidge imprecise, but using rankings would have been a lot more effort for minimal gain.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;&lt;img alt="Table 5" src="https://swpease.github.io/images/snooker/snooker_split_upset_pct.png"&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" rev="footnote" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:3"&gt;
&lt;p&gt;I know it's not perfect, but I tried a more complicated transformation, namely &lt;code&gt;1 + log2(ceil(seeding / 4))&lt;/code&gt;, which seemed closer to correct to me, but the graphs wound up looking basically the same, so I decided to keep the simpler transformation.&amp;#160;&lt;a class="footnote-backref" href="#fnref:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;a class="footnote-backref" href="#fnref2:3" rev="footnote" title="Jump back to footnote 3 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:4"&gt;
&lt;p&gt;&lt;img alt="Table 6 supp_1" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_log2.png"&gt;
 &lt;img alt="Table 6 supp_2" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_log2_non-top16_plt.png"&gt;
&lt;img alt="Table 6 supp_3" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_log2_top16_plt.png"&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:4" rev="footnote" title="Jump back to footnote 4 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:5"&gt;
&lt;p&gt;&lt;img alt="Table 7 supp" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_stuffdiv4.png"&gt;
&lt;img alt="Table 7 supp_2" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_stuffdiv4_non-top16_plt.png"&gt;
&lt;img alt="Table 7 supp_3" src="https://swpease.github.io/images/snooker/snooker_u_p_bin_counts_stuffdiv4_top16_plt.png"&gt;&amp;#160;&lt;a class="footnote-backref" href="#fnref:5" rev="footnote" title="Jump back to footnote 5 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="analysis"></category></entry><entry><title>Shaving</title><link href="https://swpease.github.io/shaving.html" rel="alternate"></link><published>2019-04-24T00:00:00-07:00</published><updated>2019-04-24T00:00:00-07:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2019-04-24:/shaving.html</id><summary type="html">&lt;h1&gt;The Options&lt;/h1&gt;
&lt;p&gt;I have had to shave regularly, since some time in high school. I have fairly thick hair, particularly in the chin and mustache region. It can be a hassle. I've tried a few options over the years:
1. Buying cartridges in stores.
2. Subscribing to online clubs.
3 …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Options&lt;/h1&gt;
&lt;p&gt;I have had to shave regularly, since some time in high school. I have fairly thick hair, particularly in the chin and mustache region. It can be a hassle. I've tried a few options over the years:
1. Buying cartridges in stores.
2. Subscribing to online clubs.
3. Safety razors.&lt;/p&gt;
&lt;p&gt;They each have their pros and cons, which I'll go over.&lt;/p&gt;
&lt;h3&gt;Buying Cartridges in Stores&lt;/h3&gt;
&lt;p&gt;The classic for anyone who isn't geriatric. I remember when my dad taught me to shave. It was basically, "spray some shaving cream into your hand, rub it over your face, then rub this razor over your face..." There's really nothing to it.&lt;/p&gt;
&lt;p&gt;I like shaving with these the best. I have always been a fan on the two-bladed cartridges. Three is okay, but I dislike how bulky the larger-count cartridges are. I also feel like they're a complete waste, given how effective two blades have been for me.&lt;/p&gt;
&lt;p&gt;The only issue for me is cost. I recently checked out the cartridges selection at Fred Meyer, and saw my trusty Sensor Excels at 10 for $30. That's just too much. This price is what drove me to try option #2 on the list.&lt;/p&gt;
&lt;h3&gt;Subscribing to Online Clubs&lt;/h3&gt;
&lt;p&gt;I tried out Dollar Shave Club. I went with the two-bladed model. At first I was pleased with it: it did the job well and cost a fraction of the price (I think ~ $1 / cartridge).&lt;/p&gt;
&lt;p&gt;But then, I visited my parents, where I still have some of the classic cartridges (both Sensor Excel and Mach 3). It felt like heaven to my face in comparison.&lt;/p&gt;
&lt;p&gt;If I had to guess, I'd say that the issue was the flimsy construction, which might cause some shaking / other motion that leads to uneven speeds across my face, leading to more tugging. But that's just conjecture.&lt;/p&gt;
&lt;p&gt;Which led me to option #3 on the list.&lt;/p&gt;
&lt;h3&gt;Safety Razors&lt;/h3&gt;
&lt;p&gt;I performed a little research using some relevant subreddit. I forget the name. But I wound up going with Maggard for my razor, styptic, alum block, brush, a variety pack of blades, and 'sapone di barba' or whatever.&lt;/p&gt;
&lt;p&gt;I've been using it for close to a year now, and my conclusion is: it's okay. I haven't been this nonplussed by a hyped alternative product since organic peanut butter.&lt;/p&gt;
&lt;p&gt;I did learn why dads teaching their sons how to shave is actually a thing: there's a lot more going on with safety razor shaving compared to cartridge shaving. You gotta lather the shaving cream, angle the razor, be careful about the grain...&lt;/p&gt;
&lt;p&gt;But, I still just prefer the ease and comfort of a Gillette cartridge and canned shaving cream. Sure, my &lt;em&gt;sapone&lt;/em&gt; smells nice, but it's inconvenient and expensive. It is more common for me to miss spots with my safety razor as well, stemming from the fact that it's not as comfortable on my face. Plus I'm still trying to find my optimum razor blades, an area for which reviews aren't really much use, since other reviewers don't have your face.&lt;/p&gt;
&lt;p&gt;That being said, the cartridge is not 10+ times the price better. So I'll stick with my safety razor.&lt;/p&gt;</content><category term="grooming"></category></entry><entry><title>Setting up Gunicorn with systemd on Ubuntu</title><link href="https://swpease.github.io/setting-up-gunicorn-with-systemd-on-ubuntu.html" rel="alternate"></link><published>2019-01-25T00:00:00-08:00</published><updated>2019-01-25T00:00:00-08:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2019-01-25:/setting-up-gunicorn-with-systemd-on-ubuntu.html</id><summary type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Gunicorn provides &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;a number of ways&lt;/a&gt; for you to handle running it in deployment. You need a supervisor, which is just a process that monitors and manages some other process. So you can tell it things like, 'start gunicorn when someone first requests a webpage' and 'reload gunicorn when …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Background&lt;/h1&gt;
&lt;p&gt;Gunicorn provides &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;a number of ways&lt;/a&gt; for you to handle running it in deployment. You need a supervisor, which is just a process that monitors and manages some other process. So you can tell it things like, 'start gunicorn when someone first requests a webpage' and 'reload gunicorn when it crashes'.&lt;/p&gt;
&lt;p&gt;In skimming over the options that Gunicorn listed, I initially thought of using Supervisor, probably because I had seen it mentioned before. I am wary of my disposition to trusting things just because I've heard of them, but decided to look into it anyway. I saw that I would need to install Python 2 to use it, and put my foot down.
I decided to try out systemd because it was a built-in tool, and I am suspicious of taking on dependencies for what seem to be minimal tasks. It also seemed the most generalizable thing to learn.&lt;/p&gt;
&lt;h1&gt;Research&lt;/h1&gt;
&lt;p&gt;The best basic introduction I found was on &lt;a href="https://www.digitalocean.com/community/tutorials/understanding-systemd-units-and-unit-files#anatomy-of-a-unit-file"&gt;Digital Ocean&lt;/a&gt;.
The systemd creators have their documentation as well: &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.service.html#"&gt;systemd&lt;/a&gt;, &lt;a href="https://www.freedesktop.org/software/systemd/man/systemctl.html"&gt;systemctl&lt;/a&gt;.
More advanced topics, such as security and setting up your own software to handle systemd socket stuff, are covered in this dude Pid Eins's &lt;a href="http://0pointer.de/blog/projects/security.html"&gt;blog&lt;/a&gt;, though it's not spectacularly organized.
For implementing systemd for Gunicorn, I referenced mostly &lt;a href="http://docs.gunicorn.org/en/stable/deploy.html"&gt;Gunicorn&lt;/a&gt;, but also &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04#create-a-gunicorn-systemd-service-file"&gt;Digital Ocean&lt;/a&gt;.
I might need a systemd service file for &lt;a href="https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/"&gt;nginx&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Execution&lt;/h1&gt;
&lt;p&gt;Gunicorn recommends setting up a socket, which is always listening, which starts up Gunicorn proper via a corresponding "service". Per Eins's blog, this can be a more efficient way to use resources. For instance, if you have a bunch of rarely-accessed websites on the same server, you could activate / deactivate them as needed. I wonder if this is how Heroku manages its hobby-tier apps.&lt;/p&gt;
&lt;p&gt;The gunicorn.socket file is super simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn socket&lt;/span&gt;

&lt;span class="k"&gt;[Socket]&lt;/span&gt;
&lt;span class="na"&gt;ListenStream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/run/gunicorn/socket&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;sockets.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It basically specifies an address to listen on for a stream socket. systemd appears to create this socket as part of this gunicorn.socket file's existence -- this socket is the only contents of /run/gunicorn when you navigate to it upon starting up the server.&lt;/p&gt;
&lt;p&gt;The gunicorn.service is a bit more complex:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn daemon&lt;/span&gt;
&lt;span class="na"&gt;Requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn.socket&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;PIDFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/run/gunicorn/pid&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;vagrant&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;RuntimeDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/vagrant/mysite&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/vagrant/.local/share/virtualenvs/vagrant-gKDsaKU3/bin/gunicorn --pid /run/gunicorn/pid --bind unix:/run/gunicorn/socket mysite.wsgi&lt;/span&gt;
&lt;span class="na"&gt;ExecReload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/bin/kill -s HUP $MAINPID&lt;/span&gt;
&lt;span class="na"&gt;ExecStop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/bin/kill -s TERM $MAINPID&lt;/span&gt;
&lt;span class="na"&gt;PrivateTmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;true&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is more complex. An annotation (NB: I do not know what all of these mean) goes something like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Requires=gunicorn.socket&lt;/code&gt; says that gunicorn.service is dependent upon gunicorn.socket.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PIDFile=/run/gunicorn/pid&lt;/code&gt; I'm unsure why Gunicorn's docs have this in here. Look at the systemd docs for more info on it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; per Digital Ocean,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We will give our regular user account ownership of the process since it owns all of the relevant files. We'll give group ownership to the www-data group so that Nginx can communicate easily with Gunicorn.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am still a bit unclear about what user and group will be needed. I tried setting both &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Group&lt;/code&gt; to be "vagrant", and tried both as "www-data", and both yield responses when connecting to the index page on localhost.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RuntimeDirectory=gunicorn&lt;/code&gt; The &lt;a href="https://www.freedesktop.org/software/systemd/man/systemd.exec.html#"&gt;docs&lt;/a&gt; indicate that the directory's lifetime will be bound to the daemon's. Upon running &lt;code&gt;sudo systemctl stop gunicorn.service&lt;/code&gt;, which calls the &lt;code&gt;ExecStop&lt;/code&gt; command, /run/gunicorn is empty, i.e. the socket is gone. It looks like this declaration supersedes the Gunicorn docs's suggestion of having /etc/tmpfiles.d/gunicorn.conf (systemd says tmpfiles.d is for complex cases).
Removing this line yields the following error when trying to connect:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl: (56) Recv failure: Connection reset by peer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And it appears that /run/gunicorn and its parent dirs are owned by root with permissions 755. Conversely, when RuntimeDirectory is specified, /run/gunicorn has User and Group equal to what they were specified as in the gunicorn.service file (vagrant and www-data in this case).
When the service has been halted, then, per RuntimeDirectory's behavior, /run/gunicorn will be deleted. As such, to restart things, you need to restart gunicorn.socket with &lt;code&gt;sudo systemctl restart gunicorn.socket&lt;/code&gt;. This will recreate the /run/gunicorn directory with the socket in it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WorkingDirectory&lt;/code&gt; sets the directory for any executed commands (e.g. ExecStart).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ExecStart&lt;/code&gt; and company are just commands to execute at the relevant lifecycle events. For my purposes, because I have Gunicorn installed via a virtual environment, I have to provide the path to its actual install. I think I could alternatively use other lifecycle hooks to start and stop the virtual environment, the just call 'gunicorn' in my ExecStart.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PrivateTmp&lt;/code&gt; is described as a security feature (see also Eins's blog)&lt;/p&gt;
&lt;h1&gt;Problems I Encountered&lt;/h1&gt;
&lt;p&gt;I made some edits to my gunicorn.service file, and I was not getting my curl test to work (&lt;code&gt;curl --unix-socket /run/gunicorn/socket http://localhost:8000&lt;/code&gt; &lt;em&gt;mind the port&lt;/em&gt;). Upon restarting the VM, it worked. I believe I needed to run &lt;code&gt;sudo systemctl daemon-restart&lt;/code&gt;.&lt;/p&gt;</content><category term="computer"></category><category term="backend"></category><category term="howto"></category></entry><entry><title>Stuff About Ports and Sockets</title><link href="https://swpease.github.io/stuff-about-ports-and-sockets.html" rel="alternate"></link><published>2018-12-15T00:00:00-08:00</published><updated>2018-12-15T00:00:00-08:00</updated><author><name>Scott Pease</name></author><id>tag:swpease.github.io,2018-12-15:/stuff-about-ports-and-sockets.html</id><summary type="html">&lt;p&gt;Socket = {IP Address : Port}
Connection = {Local Socket + Remote Socket + Protocol}
Protocol = TCP, UDP, etc.
Listen = Look for client requests at a specific well-known port.&lt;/p&gt;
&lt;p&gt;A server socket can serve multiple clients because the service just kinda keeps track of which requests are associated with which clients. Which I suppose makes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Socket = {IP Address : Port}
Connection = {Local Socket + Remote Socket + Protocol}
Protocol = TCP, UDP, etc.
Listen = Look for client requests at a specific well-known port.&lt;/p&gt;
&lt;p&gt;A server socket can serve multiple clients because the service just kinda keeps track of which requests are associated with which clients. Which I suppose makes complete sense without any thought.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/3329641/how-do-multiple-clients-connect-simultaneously-to-one-port-say-80-on-a-server"&gt;Stack Overflow&lt;/a&gt;: How to multiple clients connect simultaneously to one port?&lt;/p&gt;
&lt;p&gt;When a client connects to a server, the client uses a random, unused, high-number port. That way multiple people with the same IP address (family, coworkers, etc.) can use the same service at the same time.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/1694144/can-two-applications-listen-to-the-same-port"&gt;Stack Overflow&lt;/a&gt;: Can two applications listen to the same port?&lt;/p&gt;
&lt;p&gt;For TCP, no. That's the reason ports exist: to allow multiple applications to share the network without conflicts. Well, technically yes, but not without work.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Port_(computer_networking)"&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For TCP, only one process may bind to a specific IP address and port combination.
Common application failures, sometimes called port conflicts, occur when multiple programs attempt to use the same port number on the same IP address with the same protocol.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://www.quora.com/What-is-the-difference-between-HTTP-protocol-and-TCP-protocol"&gt;Quora&lt;/a&gt;: The differences between IP, TCP, HTTP, etc.&lt;/p&gt;
&lt;h2&gt;Sockets&lt;/h2&gt;
&lt;p&gt;The answer given by Daniel Miller is quite good.
See also &lt;a href="https://en.wikipedia.org/wiki/Internet_protocol_suite#Internet_layer"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Application programmers are typically concerned only with interfaces in the application layer and often also in the transport layer, while the layers below are services provided by the TCP/IP stack in the operating system. Most IP implementations are accessible to programmers through sockets and APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are multiple, different definitions of "socket" depending on context. e.g. the &lt;a href="https://en.wikipedia.org/wiki/Berkeley_sockets"&gt;Berkeley socket&lt;/a&gt;, for which a socket is an abstract representation for the local endpoint of a network communication path. Incidentally, Berkeley sockets answers my questions about where IP and transport layer coding is stored / interacted with (a socket API).&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://docs.python.org/3.7/howto/sockets.html"&gt;Python sockets HOWTO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Useful answer on &lt;a href="https://askubuntu.com/questions/247625/what-is-the-loopback-device-and-how-do-i-use-it"&gt;loopback&lt;/a&gt;
&lt;a href="https://docs.freebsd.org/44doc/psd/20.ipctut/paper.pdf"&gt;Berkeley sockets&lt;/a&gt;&lt;/p&gt;</content><category term="computer"></category><category term="networking"></category><category term="sockets"></category></entry></feed>